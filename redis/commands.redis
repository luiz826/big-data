
# 1. Chaves
# 1.1 Crie a chave "simples" com o valor "um valor" e então cheque para ver se o valor foi inserido corretamente.
SET simples "um valor"
GET simples

# 1.2 Crie 3 usuários fictícios com as chaves formatadas como "usuario:identificador", com o identificador começando em 1, depois 2, etc...
SET usuario:1 "usuario1"
SET usuario:2 "usuario2"
SET usuario:3 "usuario3"

# 1.3 Liste todas as chaves já criadas.
KEYS *

# 1.4 Liste somente as chaves de usuários.
KEYS usuario:*

# 1.5 Crie mais dois usuários, com o fim do identificador sendo os números 11 e 21.
SET usuario:11 "usuario11"
SET usuario:21 "usuario21"

# 1.6 Liste todas as chaves de usuário com identificadores terminando em 1.
KEYS usuario:*1

# 1.7 Crie um usuario com o identificador terminando em 1 e cujo número esteja entre 20 e 39.
SET usuario:31 "usuario31"

# 1.8 Liste todas as chaves de usuário com identificador terminando em 1 e que esteja entre 20 e 30.
KEYS usuario:2[0-9]1

# 1.9 Mude a chave usuario:1 para usuario:01.
RENAME usuario:1 usuario:01

# 1.10 Liste todas as chaves terminadas em 1.
KEYS *1

# 1.11 Remova o usuário com identificador 3.
DEL usuario:3

# 1.12 Configure o usuario 2 para que sua chave expire em 10 segundos.
EXPIRE usuario:2 10

# 2. String
# 2.1 Crie uma chave chamada "animal" com o valor "gato".
SET animal "gato"

# 2.2 Mude o valor da chave "animal" de "gato" para "peixe", retornando o valor original.
GETSET animal "peixe"

# 2.3 Acrescente "-espada" ao valor da chave "animal".
APPEND animal "-espada"

# 2.4 Retorne a substring "espada".
GETRANGE animal 6 11

# 2.5 Retorne a substring "peixe".
GETRANGE animal 0 4

# 2.6 Defina uma nova string chamada "count" com o valor 0.
SET count 0

# 2.7 Incremente "count" em 1.
INCR count

# 2.8 Incremente "count" em 10.
INCRBY count 10

# 2.9 Retorne o comprimento da string "count".
STRLEN count

# 3. Hashes
# 3.1 Primeiramente, cheque se existe a chave "cachorros" na hash "animais".
HEXISTS animais cachorros

# 3.2 Crie a hash "animais" e adicione "cachorros" com o valor 25 associado a ele.
HSET animais cachorros 25

# 3.3 Adicione "gatos" com o valor de 37 associado.
HSET animais gatos 37

# 3.4 Adicione "peixes" com o valor de 28 associado.
HSET animais peixes 28

# 3.5 Retorne todo o conteúdo (chaves e valores) da hash "animais".
HGETALL animais

# 3.6 Retorne o valor somente das chaves "cachorros" e "gatos".
HMGET animais cachorros gatos

# 3.7 Em um único comando, crie uma hash chamada "arvores" e adicione "palmeira" com o valor 81, "pinheiro" com o valor 23, e "baobá" com o valor 1.
HMSET arvores palmeira 81 pinheiro 23 baobá 1

# 3.8 Mostre somente os valores da hash "arvores".
HVALS arvores

# 3.9 Mostre somente as chaves da hash "arvores".
HKEYS arvores

# 3.10 Corrija o valor de "pinheiro" para 12 e verifique.
HSET arvores pinheiro 12
HGET arvores pinheiro

# 4. Listas
# 4.1 Adicione o valor "Verificar correio" ao final da lista "tarefas", mas usando o comando que o adiciona somente se a lista já existir.
RPUSHX tarefas "Verificar correio"

# 4.2 Repita o passo anterior, mas use a versão do comando que não verifica a existência.
RPUSH tarefas "Verificar correio"

# 4.3 Anexe o valor "Abrir correio" ao final da lista.
RPUSH tarefas "Abrir correio"

# 4.4 Adicione "Iniciar sistema" ao início da lista.
LPUSH tarefas "Iniciar sistema"

# 4.5 Obter o tamanho da lista.
LLEN tarefas

# 4.6 Retorne o conteúdo de toda a lista.
LRANGE tarefas 0 -1

# 4.7 Faça com que a primeira entrada na lista seja "Abrir o correio".
LSET tarefas 0 "Abrir o correio"

# 4.8 Usando um único comando, examine as primeiras 2 entradas na lista.
LRANGE tarefas 0 1

# 4.9 Remova a primeira entrada na lista.
LPOP tarefas

# 4.10 Examine o valor da segunda entrada na lista.
LINDEX tarefas 1

# 4.11 Retorne toda a lista.
LRANGE tarefas 0 -1

# 5. Sets
# 5.1 Adicione "maçãs", "laranjas" e "bananas" a um conjunto chamado "cesta:1".
SADD cesta:1 "maçãs" "laranjas" "bananas"

# 5.2 Liste os membros da "cesta:1".
SMEMBERS cesta:1

# 5.3 Adicione "abacaxis", "bananas" e "laranjas" a um conjunto "cesta:2".
SADD cesta:2 "abacaxis" "bananas" "laranjas"

# 5.4 Verifique os membros do "cesta:2".
SMEMBERS cesta:2

# 5.5 Obtenha a interseção dos 2 conjuntos.
SINTER cesta:1 cesta:2

# 5.6 Mova "abacaxis" de "cesta:2" para "cesta:1", e verifique listando os membros.
SMOVE cesta:2 cesta:1 "abacaxis"
SMEMBERS cesta:1

# 5.7 Armazene a união dos 2 conjuntos em um novo conjunto chamado "allbaskets".
SUNIONSTORE allbaskets cesta:1 cesta:2

# 5.8 Remova "laranjas" de "cesta:1".
SREM cesta:1 "laranjas"

# 6. Sorted Sets
# 6.1 Adicione os seguintes membros e scores ao conjunto ordenado "equipe:1": Joao 69, Leonardo 67, Sergio 70, Sandra 68, Ana 70 e Maria 73.
ZADD equipe:1 69 "Joao" 67 "Leonardo" 70 "Sergio" 68 "Sandra" 70 "Ana" 73 "Maria"

# 6.2 Retorne o número de membros no conjunto.
ZCARD equipe:1

# 6.3 Obtenha uma contagem do número de membros com scores entre 70 e 75.
ZCOUNT equipe:1 70 75

# 6.4 Obtenha os membros com scores entre 65 e 70.
ZRANGEBYSCORE equipe:1 65 70

# 6.5 Retorne a classificação da Sandra no time.
ZRANK equipe:1 "Sandra"

# 6.6 Retorne, por ordem decrescente, os membros com scores entre 65 e 69.
ZREVRANGEBYSCORE equipe:1 69 65

# 7. TTL
# 7.1 Primeiro, usando a CLI adicione a chave "quote: 221" com um valor de "94.23" para Redis.
SET quote:221 "94.23"

# 7.2 Recupere o TTL atual da chave usando o comando "TTL". Note que, uma vez que um TTL ainda não foi configurado na chave, Redis retorna -1.
TTL quote:221

# 7.3 Agora, defina a chave para expirar após 30 segundos. Antes de passarem 30 segundos, use o comando TTL novamente para obter o tempo restante antes da chave expirar.
EXPIRE quote:221 30
TTL quote:221

# 8. Modelo de dados de Artigos e Tags

# 8.1 Criando o primeiro artigo com nome, descrição, nome do arquivo e data de postagem.
HSET article:1 name "Artigo 1" description "Descrição do Artigo 1" filename "artigo1.txt" posting_date "2024-10-01"

# 8.2 Criando o segundo artigo.
HSET article:2 name "Artigo 2" description "Descrição do Artigo 2" filename "artigo2.txt" posting_date "2024-10-01"

# 8.3 Criando o terceiro artigo.
HSET article:3 name "Artigo 3" description "Descrição do Artigo 3" filename "artigo3.txt" posting_date "2024-10-01"

# 8.4 Associando tags aos artigos. Usamos SET para cada artigo que pode ter múltiplas tags.
SADD article:1:tags "tech" "AI"
SADD article:2:tags "health" "AI"
SADD article:3:tags "tech" "education"

# 8.5 Criando conjuntos de tags que contenham os artigos relacionados a elas.
SADD tag:tech "article:1" "article:3"
SADD tag:AI "article:1" "article:2"
SADD tag:health "article:2"
SADD tag:education "article:3"

# 8.6 Recuperar todos os artigos associados à tag "tech".
SMEMBERS tag:tech

# 8.7 Recuperar todas as tags associadas ao artigo "article:1".
SMEMBERS article:1:tags

# 8.8 Adicionar uma nova tag ao "article:2".
SADD article:2:tags "innovation"

# 8.9 Atualizar o conjunto de artigos que pertencem à tag "innovation".
SADD tag:innovation "article:2"

# 8.10 Remover uma tag de um artigo. Exemplo: remover a tag "AI" do "article:1".
SREM article:1:tags "AI"

# 8.11 Atualizar o conjunto de artigos que pertencem à tag "AI" removendo o "article:1".
SREM tag:AI "article:1"

# 8.12 Excluir um artigo completamente (hash e suas associações com tags).
DEL article:1
DEL article:1:tags
SREM tag:tech "article:1"
SREM tag:AI "article:1"

# 9. Adicionar dados ao modelo relacionando-os

# 9.1 Manter um conjunto de todos os artigos
SADD all_articles "article:1" "article:2" "article:3"

# 10. Listar todos os artigos.
SMEMBERS all_articles

# 11. Listar um único artigo, além de listar suas tags.
# Exemplo para o artigo 2
HGETALL article:2
SMEMBERS article:2:tags

# 12. Para determinada(s) tag(s), liste todos os artigos nela.
# Exemplo para a tag "tech"
SMEMBERS tag:tech

# 12.1 Listar todos os artigos para a tag "AI".
SMEMBERS tag:AI

# 12.2 Listar todos os artigos para múltiplas tags (por exemplo, "tech" e "education").
SINTER tag:tech tag:education
